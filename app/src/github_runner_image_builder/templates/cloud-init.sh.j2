#!/bin/bash

set -e

RELEASE=$(lsb_release -a | grep Codename: | awk '{print $2}')

hostnamectl set-hostname github-runner

function configure_proxy() {
    local proxy="$1"
    local proxy_url ="${1:+http://$1}"

    echo "Installing aproxy"
    # We always want snap aproxy and nft (in focal) to be installed, even it they are not used by the image builder.
    /usr/bin/sudo snap set system proxy.http=${proxy_url}
    /usr/bin/sudo snap set system proxy.https=${proxy_url}
    /usr/bin/sudo systemctl restart snapd
    /usr/bin/sudo snap install aproxy --edge;
    /usr/bin/sudo snap set system proxy.http=""
    /usr/bin/sudo snap set system proxy.https=""

    if [ $RELEASE == "focal" ]; then
        echo "Ensure nftables is installed on focal"
        # Focal does not have nftables install by default. Jammy and onward would not need this.
        HTTP_PROXY=${proxy_url} HTTPS_PROXY=${proxy_url} NO_PROXY=127.0.0.1,localhost,::1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/1 DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get update -y
        HTTP_PROXY=${proxy_url} HTTPS_PROXY=${proxy_url} NO_PROXY=127.0.0.1,localhost,::1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/1 DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --no-install-recommends nftables
    fi

    # Do not configure the proxy if it is not needed for building the image.
    if [[ -z "$proxy" ]]; then
        return
    fi

    echo "Configure nft and aproxy"
    /usr/bin/sudo nft -f - << EOF
define default-ip = $(ip route get $(ip route show 0.0.0.0/0 | grep -oP 'via \K\S+') | grep -oP 'src \K\S+')
define private-ips = { 10.0.0.0/8, 127.0.0.1/8, 172.16.0.0/12, 192.168.0.0/16 }
table ip aproxy
flush table ip aproxy
table ip aproxy {
        chain prerouting {
                type nat hook prerouting priority dstnat; policy accept;
                ip daddr != \$private-ips tcp dport { 80, 443 } counter dnat to \$default-ip:8444
        }
        chain output {
                type nat hook output priority -100; policy accept;
                ip daddr != \$private-ips tcp dport { 80, 443 } counter dnat to \$default-ip:8444
        }
}
EOF
    echo "Configuring aproxy"
    /usr/bin/sudo snap set aproxy proxy=${proxy} listen=:8444;
    echo "Wait for aproxy to start"
    sleep 5
}

function install_apt_packages() {
    local packages="$1"
    local hwe_version="$2"

    # The gh package (GitHub CLI application) is not in the APT repository for focal.
    # For focal, the apt repository of GitHub is added.
    if [ $RELEASE == "focal" ]; then
        mkdir -p -m 755 /etc/apt/keyrings
        wget -nv -O /etc/apt/keyrings/githubcli-archive-keyring.gpg https://cli.github.com/packages/githubcli-archive-keyring.gpg
        chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" > /etc/apt/sources.list.d/github-cli.list
    fi

    echo "Updating apt packages"
    DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get update -y
    echo "Installing apt packages $packages"
    DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --no-install-recommends ${packages}
    echo "Installing linux-generic-hwe-${hwe_version}"
    DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --install-recommends linux-generic-hwe-${hwe_version}
}

function disable_unattended_upgrades() {
    echo "Disabling unattended upgrades"
    /usr/bin/systemctl disable apt-daily.timer
    /usr/bin/systemctl disable apt-daily.service
    /usr/bin/systemctl disable apt-daily-upgrade.timer
    /usr/bin/systemctl disable apt-daily-upgrade.service
    /usr/bin/apt-get remove -y unattended-upgrades
}

function enable_network_fair_queuing_congestion() {
    /usr/bin/cat <<EOF | /usr/bin/sudo /usr/bin/tee -a /etc/sysctl.conf
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr
EOF
    /usr/sbin/sysctl -p
}

function configure_usr_local_bin() {
    echo "Configuring /usr/local/bin path"
    /usr/bin/chmod 777 /usr/local/bin
}

function install_yarn() {
    echo "Installing yarn"
    /usr/bin/npm install --global yarn
    /usr/bin/npm cache clean --force
}

function install_yq() {
    /usr/bin/sudo -E /usr/bin/snap install go --classic
    /usr/bin/sudo -E /usr/bin/git clone https://github.com/mikefarah/yq.git
    /usr/bin/sudo -E /snap/bin/go mod tidy -C yq
    /usr/bin/sudo -E /snap/bin/go build -C yq -o /usr/bin/yq
    /usr/bin/sudo -E /usr/bin/rm -rf yq
    /usr/bin/sudo -E /usr/bin/snap remove go
}

function install_github_runner() {
    version="$1"
    arch="$2"
    echo "Installing GitHub runner"
    if [[ -z "$version" ]]; then
        # Follow redirectin to get latest version release location
        # e.g. https://github.com/actions/runner/releases/tag/v2.318.0
        location=$(curl -sIL "https://github.com/${runner_binary_repo}/releases/latest" | sed -n 's/^location: *//p' | tr -d '[:space:]')
        # remove longest prefix from the right that matches the pattern */v
        # e.g. 2.318.0
        version=${location##*/v}
    fi
    /usr/bin/wget "https://github.com/${runner_binary_repo}/releases/download/v$version/actions-runner-linux-$arch-$version.tar.gz"
    /usr/bin/mkdir -p /home/ubuntu/actions-runner
    /usr/bin/tar -xvzf "actions-runner-linux-$arch-$version.tar.gz" --directory /home/ubuntu/actions-runner

    rm "actions-runner-linux-$arch-$version.tar.gz"
}

function chown_home() {
    /usr/bin/chown --recursive ubuntu:ubuntu /home/ubuntu/
}

function configure_system_users() {
    echo "Configuring ubuntu user"
    # only add ubuntu user if ubuntu does not exist
    /usr/bin/id -u ubuntu &>/dev/null || useradd --create-home ubuntu
    echo "PATH=\$PATH:/home/ubuntu/.local/bin" >> /home/ubuntu/.profile
    echo "PATH=\$PATH:/home/ubuntu/.local/bin" >> /home/ubuntu/.bashrc
    /usr/sbin/groupadd -f microk8s
    /usr/sbin/groupadd -f docker
    /usr/sbin/usermod --append --groups docker,microk8s,lxd,sudo ubuntu
}


proxy="{{ PROXY }}"
apt_packages="{{ APT_PACKAGES }}"
hwe_version="{{ HWE_VERSION }}"
github_runner_version="{{ RUNNER_VERSION }}"
github_runner_arch="{{ RUNNER_ARCH }}"
runner_binary_repo="{{ RUNNER_BINARY_REPO }}"

configure_proxy "$proxy"
install_apt_packages "$apt_packages" "$hwe_version"
disable_unattended_upgrades
enable_network_fair_queuing_congestion
configure_usr_local_bin
# The yarn installation does not work for focal.
if [ $RELEASE != "focal" ]; then
    install_yarn
fi
# install yq with ubuntu user due to GOPATH related go configuration settings
export -f install_yq
su ubuntu -c "bash -c 'install_yq'"
install_github_runner "$github_runner_version" "$github_runner_arch"
chown_home
configure_system_users
