# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, unit, static, coverage-report

[vars]
app_path = {toxinidir}/app/
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
;lib_path = {toxinidir}/lib/charms/operator_name_with_underscores
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
;basepython = python3.10
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    codespell
    flake8<6.0.0
    flake8-builtins
    flake8-copyright<6.0.0
    flake8-docstrings>=1.6.0
    flake8-docstrings-complete>=1.0.3
    flake8-test-docs>=1.0
    isort
    mypy
    pep8-naming
    pydocstyle>=2.10
    pylint
    pyproject-flake8<6.0.0
    pytest
    pytest-asyncio
    pytest-operator
    requests
    types-PyYAML
    types-requests
    -r{toxinidir}/requirements.txt
    -r{[vars]tst_path}unit/requirements.txt
    -r{[vars]tst_path}integration/requirements.txt
commands =
    pydocstyle {[vars]src_path}
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    codespell {toxinidir} --skip {toxinidir}/.git --skip {toxinidir}/.tox \
      --skip {toxinidir}/build --skip {toxinidir}/lib --skip {toxinidir}/venv \
      --skip {toxinidir}/.mypy_cache --skip {toxinidir}/icon.svg
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path} --ignore=W503
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}
    mypy {[vars]all_path}
    pylint {[vars]all_path}

[testenv:plugins]
description = Check plugins code against coding style standards
deps =
    black
    codespell
    flake8<6.0.0
    flake8-builtins
    flake8-copyright<6.0.0
    flake8-docstrings>=1.6.0
    flake8-docstrings-complete>=1.0.3
    flake8-test-docs>=1.0
    indico==3.2
    isort
    mypy
    pep8-naming
    indico_rock/plugins/autocreate
    indico_rock/plugins/anonymize
    pydocstyle>=2.10
    pylint
    pyproject-flake8<6.0.0
    pytest
    pytest-asyncio
    pytest-operator
    requests
    types-PyYAML
    types-requests
    -r{toxinidir}/requirements.txt
commands =
    codespell {[vars]plugins_path} --skip {toxinidir}/.git --skip {toxinidir}/.tox \
      --skip {toxinidir}/build --skip {toxinidir}/lib --skip {toxinidir}/venv \
      --skip {toxinidir}/.mypy_cache --skip {toxinidir}/icon.svg \
      --skip {toxinidir}/indico_rock/plugins/autocreate/.mypy_cache
      --skip {toxinidir}/indico_rock/plugins/anonymize/.mypy_cache
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]plugins_path} --ignore=W503
    isort --check-only --diff {[vars]plugins_path}
    black --check --diff {[vars]plugins_path}
    mypy {[vars]plugins_path}
    pylint {[vars]plugins_path} --ignore-paths {[vars]plugins_path}/autocreate/build,{[vars]plugins_path}/anonymize/build

[testenv:unit]
description = Run unit tests
deps =
    coverage[toml]
    pytest
    -r{toxinidir}/requirements.txt
    -r{[vars]tst_path}unit/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest --ignore={[vars]app_path} --ignore={[vars]tst_path}integration -v --tb native -s {posargs}
    coverage report

[testenv:coverage-report]
description = Create test coverage report
deps =
    coverage[toml]
    pytest
    -r{toxinidir}/requirements.txt
    -r{[vars]tst_path}unit/requirements.txt
commands =
    coverage report

[testenv:static]
description = Run static analysis tests
deps =
    bandit[toml]
    -r{toxinidir}/requirements.txt
commands =
    bandit -c {toxinidir}/pyproject.toml -r {[vars]src_path} {[vars]tst_path}

[testenv:integration]
description = Run integration tests
pass_env =
    PYTEST_ADDOPTS
    OPENSTACK_PASSWORD_AMD64
    OPENSTACK_PASSWORD_ARM64
deps =
    juju
    pytest
    pytest-asyncio
    pytest-operator
    -r{toxinidir}/requirements.txt
    -r{[vars]tst_path}integration/requirements.txt
commands =
    pytest -v --tb native --ignore={[vars]app_path} --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}
    ; Testing with microstack
    ; tox -e integration -- --charm-file=./github-runner-image-builder_ubuntu-22.04-amd64-arm64.charm
    ; --openstack-network-name=demo-network --openstack-flavor-name=m1.small
    ; Testing on private endpoint, --openstack-network-name=<redacted>
    ; --openstack-flavor-name=<redacted> --openstack-auth-url=<redacted>
    ; --openstack-password=<redacted> --openstack-project-domain-name=<redacted>
    ; --openstack-project-name=<redacted> --openstack-user-domain-name=<redacted>
    ; --openstack-user-name=<redacted> --openstack-region-name=<redacted>
